"""Top level MODULE file for the SC compiler"""

module(
    name = "sci_compiler",
    version = "0.0.1",
)

bazel_dep(name = "boost.intrusive", version = "1.83.0.bcr.1")
bazel_dep(name = "platforms", version = "0.0.11")
bazel_dep(name = "argparse", version = "3.0.0")
bazel_dep(name = "abseil-cpp", version = "20240116.1")
bazel_dep(name = "toolchains_llvm", version = "1.3.0")

bazel_dep(name = "rules_cc", version = "0.1.0", dev_dependency=True)

cc_configure_extension = use_extension(
    "@rules_cc//cc:extensions.bzl",
    "cc_configure_extension",
    dev_dependency = True,
)

use_repo(cc_configure_extension, "local_config_cc")

# # Registration for Windows development.
#
# register_execution_platforms(
#     "//:x64_windows-clang-cl",
# )

# register_toolchains(
#     "@local_config_cc//:cc-toolchain-x64_windows-clang-cl",
#     dev_dependency = True,
# )

# Configure and register the toolchain.
llvm = use_extension(
    "@toolchains_llvm//toolchain/extensions:llvm.bzl",
    "llvm",
    dev_dependency = True,
)
llvm.toolchain(
    llvm_version = "19.1.0",
    cxx_standard = {"": "c++20"},
)

use_repo(llvm, "llvm_toolchain")

# use_repo(llvm, "llvm_toolchain_llvm") # if you depend on specific tools in scripts

register_toolchains("@llvm_toolchain//:all", dev_dependency = True)

bazel_dep(name = "hedron_compile_commands", dev_dependency = True)
git_override(
    module_name = "hedron_compile_commands",
    remote = "https://github.com/hedronvision/bazel-compile-commands-extractor.git",
    commit = "4f28899228fb3ad0126897876f147ca15026151e",
    # Replace the commit hash (above) with the latest (https://github.com/hedronvision/bazel-compile-commands-extractor/commits/main).
    # Even better, set up Renovate and let it do the work for you (see "Suggestion: Updates" in the README).
)

register_toolchains("//toolchain:compiled_sci_compiler_toolchain", dev_dependency = True)
