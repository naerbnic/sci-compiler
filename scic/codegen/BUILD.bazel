# Libraries for generating SCI compiled code.

package(default_visibility = ["//scic:scic_internal"])

cc_library(
    name = "anode",
    srcs = [
        "anode.cpp",
        "anode_impls.cpp",
        "optimize.cpp",
    ],
    hdrs = [
        "alist.hpp",
        "anode.hpp",
        "anode_impls.hpp",
        "optimize.hpp",
    ],
    visibility = ["//visibility:private"],
    deps = [
        ":target",
        "//scic:common",
        "//scic:list",
        "//scic:listing",
        "//scic:opcodes",
        "//scic:output",
        "//util/types:casts",
        "@abseil-cpp//absl/strings:str_format",
    ],
)

cc_library(
    name = "fixup_list",
    srcs = ["fixup_list.cpp"],
    hdrs = ["fixup_list.hpp"],
    visibility = ["//visibility:private"],
    deps = [
        ":anode",
        "//scic:listing",
        "//scic:output",
    ],
)

cc_library(
    name = "target",
    srcs = ["target.cpp"],
    hdrs = ["target.hpp"],
    deps = [
        "//scic:listing",
        "//scic:output",
    ],
)

cc_library(
    name = "code_generator",
    srcs = ["code_generator.cpp"],
    hdrs = [
        "code_generator.hpp",
    ],
    deps = [
        ":anode",
        ":fixup_list",
        ":target",
        "//scic:common",
        "//scic:input",
        "//scic:listing",
        "//scic:opcodes",
        "//scic:output",
        "//util/types:choice",
        "//util/types:forward_ref",
        "@abseil-cpp//absl/memory",
        "@abseil-cpp//absl/strings:str_format",
    ],
)
