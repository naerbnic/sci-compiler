# This is a parser for a list of trees, like an S-expression. This takes the
# raw S-expression like language of SCI script, and creates a basic parse tree for it.
package(
    default_visibility = ["//scic:scic_internal"],
)

cc_library(
    name = "ast",
    srcs = ["ast.cpp"],
    hdrs = ["ast.hpp"],
    deps = [
        "//scic/tokens:token",
        "//util:choice",
        "@abseil-cpp//absl/strings:str_format",
        "@abseil-cpp//absl/types:span",
    ],
)

cc_library(
    name = "ast_matchers",
    testonly = True,
    hdrs = ["ast_matchers.hpp"],
    deps = [
        ":ast",
        "//util:choice_matchers",
        "@googletest//:gtest",
    ],
)

cc_test(
    name = "ast_matchers_test",
    srcs = ["ast_matchers_test.cpp"],
    deps = [
        ":ast_matchers",
        ":parser",
        ":parser_test_utils",
        "@googletest//:gtest",
        "@googletest//:gtest_main",
    ],
)

cc_library(
    name = "parser",
    srcs = ["parser.cpp"],
    hdrs = ["parser.hpp"],
    deps = [
        ":ast",
        "//scic/tokens:token",
        "//scic/tokens:token_stream",
        "//util/status:status_macros",
        "@abseil-cpp//absl/container:btree",
        "@abseil-cpp//absl/status:statusor",
        "@abseil-cpp//absl/types:span",
    ],
)

cc_library(
    name = "parser_test_utils",
    testonly = True,
    srcs = ["parser_test_utils.cpp"],
    hdrs = ["parser_test_utils.hpp"],
    deps = [
        ":ast",
        ":parser",
        "//scic/tokens:token_readers",
    ],
)

cc_test(
    name = "parser_test",
    srcs = ["parser_test.cpp"],
    deps = [
        ":ast_matchers",
        ":parser",
        "//scic/tokens:token",
        "//scic/tokens:token_readers",
        "//util/status:status_matchers",
        "@googletest//:gtest",
        "@googletest//:gtest_main",
    ],
)

cc_binary(
    name = "parser_test_tool",
    srcs = ["parser_test_tool.cpp"],
    deps = [
        ":parser",
        "//scic/tokens:token",
        "//scic/tokens:token_readers",
        "@argparse",
    ],
)
